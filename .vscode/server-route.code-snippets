{
	// Place your web-jbs-hardware workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"API Route": {
		"scope": "javascriptreact",
		"prefix": "apiRoute",
		"body": [
			"const router = require('express').Router()",
			"const service = require('./${1:RouteName}.query')",
			"",
			"router.route('/${2:RouteName}')",
			".get(async (req, res) => {",
			"await service.selectRecord(req.query, (err, ans) => {",
			"if (err) return res.status(200).json({ success: false, error: err",
			"})",
			"return res.status(200).json({",
			"success: true,",
			"result: ans || {},",
			"})",
			"})",
			"})",
			".post(async (req, res) => {",
			"await service.createRecord(req.body, (err, ans) => {",
			"if (err) return res.status(200).json({ success: false, error: err",
			"})",
			"return res.status(200).json({",
			"success: true,",
			"result: ans || {},",
			"})",
			"})",
			"})",
			".patch(async (req, res) => {",
			"await service.updateRecord(req.body, (err, ans) => {",
			"if (err) return res.status(200).json({ success: false, error: err",
			"})",
			"return res.status(200).json({",
			"success: true,",
			"result: ans || {},",
			"})",
			"})",
			"})",
			".delete(async (req, res) => {",
			"await service.deleteRecord(req.body, (err, ans) => {",
			"if (err) return res.status(200).json({ success: false, error: err",
			"})",
			"return res.status(200).json({",
			"success: true,",
			"result: ans || {},",
			"})",
			"})",
			"})",
			"",
			"router.get('/${2:RouteName}/element', async (req, res) => {",
			"await service.uniqueRecord(req.query, (err, ans) => {",
			"if (err) return res.status(200).json({ success: false, error: err",
			"})",
			"return res.status(200).json({",
			"success: true,",
			"result: ans.length === 1 ? ans[0] : {} || {},",
			"})",
			"})",
			"})",
			"",
			"router.get('/${2:RouteName}/search', async (req, res) => {",
			"await service.searchRecord(req.query, (err, ans) => {",
			"if (err) return res.status(200).json({",
			"success: false, error: err",
			"})",
			"return res.status(200).json({",
			"success: true,",
			"result: ans || {},",
			"})",
			"})",
			"})",
			"",
			"module.exports = router"
		],
		"description": ""
	}
}